Index: jdbc/jdbcAndHibernate/src/main/java/peaksoft/model/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package peaksoft.model;\r\n\r\nimport javax.persistence.*;\r\n\r\n@Table\r\npublic class User {\r\n    @Id\r\n    private Long id;\r\n\r\n    @Column\r\n    private String name;\r\n\r\n    @Column\r\n    private String lastName;\r\n\r\n    @Column\r\n    private Byte age;\r\n\r\n    public User() {\r\n    }\r\n\r\n    public User(String name, String lastName, Byte age) {\r\n        this.name = name;\r\n        this.lastName = lastName;\r\n        this.age = age;\r\n    }\r\n\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(Long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public String getLastName() {\r\n        return lastName;\r\n    }\r\n\r\n    public void setLastName(String lastName) {\r\n        this.lastName = lastName;\r\n    }\r\n\r\n    public Byte getAge() {\r\n        return age;\r\n    }\r\n\r\n    public void setAge(Byte age) {\r\n        this.age = age;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"User: \" +\r\n                \"\\nid: \" + id +\r\n                \"\\nname: \" + name +\r\n                \"\\nlastName: \" + lastName +\r\n                \"\\nage: \" + age + \"\\n\";\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/jdbc/jdbcAndHibernate/src/main/java/peaksoft/model/User.java b/jdbc/jdbcAndHibernate/src/main/java/peaksoft/model/User.java
--- a/jdbc/jdbcAndHibernate/src/main/java/peaksoft/model/User.java	(revision c3ae57dae27ae3770733c33d7a5e58713a6a94c4)
+++ b/jdbc/jdbcAndHibernate/src/main/java/peaksoft/model/User.java	(date 1666410092600)
@@ -5,6 +5,7 @@
 @Table
 public class User {
     @Id
+    @GeneratedValue (strategy = GenerationType.IDENTITY)
     private Long id;
 
     @Column
Index: jdbc/jdbcAndHibernate/src/main/java/peaksoft/service/UserServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package peaksoft.service;\r\n\r\nimport peaksoft.dao.UserDao;\r\nimport peaksoft.dao.UserDaoJdbcImpl;\r\nimport peaksoft.model.User;\r\n\r\nimport java.sql.SQLException;\r\nimport java.util.List;\r\n\r\npublic class UserServiceImpl implements UserService {\r\n    UserDao userDaoJdbc = new UserDaoJdbcImpl();\r\n\r\n    public void createUsersTable() throws SQLException {\r\n        userDaoJdbc.createUsersTable();\r\n    }\r\n\r\n    public void dropUsersTable() {\r\n        userDaoJdbc.dropUsersTable();\r\n    }\r\n\r\n    public void saveUser(String name, String lastName, byte age) {\r\n        userDaoJdbc.saveUser(name, lastName, age);\r\n    }\r\n\r\n    public void removeUserById(long id) {\r\n        userDaoJdbc.removeUserById(id);\r\n    }\r\n\r\n    public List<User> getAllUsers() {\r\n\r\n        return userDaoJdbc.getAllUsers();\r\n    }\r\n\r\n    public void cleanUsersTable() {\r\n        userDaoJdbc.cleanUsersTable();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/jdbc/jdbcAndHibernate/src/main/java/peaksoft/service/UserServiceImpl.java b/jdbc/jdbcAndHibernate/src/main/java/peaksoft/service/UserServiceImpl.java
--- a/jdbc/jdbcAndHibernate/src/main/java/peaksoft/service/UserServiceImpl.java	(revision c3ae57dae27ae3770733c33d7a5e58713a6a94c4)
+++ b/jdbc/jdbcAndHibernate/src/main/java/peaksoft/service/UserServiceImpl.java	(date 1666411376790)
@@ -1,37 +1,39 @@
 package peaksoft.service;
 
 import peaksoft.dao.UserDao;
-import peaksoft.dao.UserDaoJdbcImpl;
+import peaksoft.hibernaterepository.UserDaoHibernateImpl;
+import peaksoft.jdbcrepository.UserDaoJdbcImpl;
 import peaksoft.model.User;
 
 import java.sql.SQLException;
 import java.util.List;
 
 public class UserServiceImpl implements UserService {
-    UserDao userDaoJdbc = new UserDaoJdbcImpl();
+//    UserDao userDaoJdbc = new UserDaoJdbcImpl();
+    UserDaoHibernateImpl userDaoHibernate = new UserDaoHibernateImpl();
 
     public void createUsersTable() throws SQLException {
-        userDaoJdbc.createUsersTable();
+       userDaoHibernate.createUsersTable();
     }
 
     public void dropUsersTable() {
-        userDaoJdbc.dropUsersTable();
+        userDaoHibernate.dropUsersTable();
     }
 
     public void saveUser(String name, String lastName, byte age) {
-        userDaoJdbc.saveUser(name, lastName, age);
+        userDaoHibernate.saveUser(name, lastName, age);
     }
 
     public void removeUserById(long id) {
-        userDaoJdbc.removeUserById(id);
+        userDaoHibernate.removeUserById(id);
     }
 
     public List<User> getAllUsers() {
 
-        return userDaoJdbc.getAllUsers();
+        return userDaoHibernate.getAllUsers();
     }
 
     public void cleanUsersTable() {
-        userDaoJdbc.cleanUsersTable();
+        userDaoHibernate.cleanUsersTable();
     }
 }
Index: jdbc/jdbcAndHibernate/jdbcAndHibernate.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/jdbc/jdbcAndHibernate/jdbcAndHibernate.iml b/jdbc/jdbcAndHibernate/jdbcAndHibernate.iml
deleted file mode 100644
--- a/jdbc/jdbcAndHibernate/jdbcAndHibernate.iml	(revision c3ae57dae27ae3770733c33d7a5e58713a6a94c4)
+++ /dev/null	(revision c3ae57dae27ae3770733c33d7a5e58713a6a94c4)
@@ -1,41 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="web" name="Web">
-      <configuration>
-        <webroots>
-          <root url="file://$MODULE_DIR$/src/main/webapp" relative="/" />
-        </webroots>
-        <sourceRoots>
-          <root url="file://$MODULE_DIR$/src/main/java" />
-        </sourceRoots>
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_16">
-    <output url="file://$MODULE_DIR$/target/classes" />
-    <output-test url="file://$MODULE_DIR$/target/test-classes" />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
-      <excludeFolder url="file://$MODULE_DIR$/target" />
-    </content>
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="library" name="Maven: org.postgresql:postgresql:42.2.19" level="project" />
-    <orderEntry type="library" scope="RUNTIME" name="Maven: org.checkerframework:checker-qual:3.5.0" level="project" />
-    <orderEntry type="library" name="Maven: org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final" level="project" />
-    <orderEntry type="library" name="Maven: org.hibernate:hibernate-core:4.3.10.Final" level="project" />
-    <orderEntry type="library" name="Maven: org.jboss.logging:jboss-logging:3.1.3.GA" level="project" />
-    <orderEntry type="library" name="Maven: org.jboss.logging:jboss-logging-annotations:1.2.0.Beta1" level="project" />
-    <orderEntry type="library" name="Maven: org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec:1.0.0.Final" level="project" />
-    <orderEntry type="library" name="Maven: dom4j:dom4j:1.6.1" level="project" />
-    <orderEntry type="library" name="Maven: xml-apis:xml-apis:1.0.b2" level="project" />
-    <orderEntry type="library" name="Maven: org.hibernate.common:hibernate-commons-annotations:4.0.5.Final" level="project" />
-    <orderEntry type="library" name="Maven: org.javassist:javassist:3.18.1-GA" level="project" />
-    <orderEntry type="library" name="Maven: antlr:antlr:2.7.7" level="project" />
-    <orderEntry type="library" name="Maven: org.jboss:jandex:1.1.0.Final" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: junit:junit:4.11" level="project" />
-    <orderEntry type="library" scope="TEST" name="Maven: org.hamcrest:hamcrest-core:1.3" level="project" />
-  </component>
-</module>
\ No newline at end of file
Index: jdbc/jdbcAndHibernate/src/main/java/peaksoft/dao/UserDaoJdbcImpl.java
===================================================================
diff --git a/jdbc/jdbcAndHibernate/src/main/java/peaksoft/dao/UserDaoJdbcImpl.java b/jdbc/jdbcAndHibernate/src/main/java/peaksoft/dao/UserDaoJdbcImpl.java
deleted file mode 100644
--- a/jdbc/jdbcAndHibernate/src/main/java/peaksoft/dao/UserDaoJdbcImpl.java	(revision c3ae57dae27ae3770733c33d7a5e58713a6a94c4)
+++ /dev/null	(revision c3ae57dae27ae3770733c33d7a5e58713a6a94c4)
@@ -1,101 +0,0 @@
-package peaksoft.dao;
-
-import peaksoft.model.User;
-import peaksoft.util.Util;
-
-import java.sql.*;
-import java.util.ArrayList;
-import java.util.List;
-
-public class UserDaoJdbcImpl implements UserDao {
-    private static final Connection connection = Util.getConnection();
-
-    public UserDaoJdbcImpl() {
-
-    }
-
-    public void createUsersTable() {
-        String query = """
-                create table  users(
-                id serial primary key,
-                name varchar not null,
-                last_name varchar not null,
-                age smallint not null);
-                """;
-        try (Statement createTable = connection.createStatement()) {
-            createTable.executeUpdate(query);
-            System.out.println("Table users successfully created");
-        } catch (SQLException e) {
-            System.out.println(e.getMessage());
-        }
-
-    }
-
-    public void dropUsersTable() {
-        String query = "drop table  users;";
-        try (Statement dropTable = connection.createStatement()) {
-            dropTable.executeUpdate(query);
-            System.out.println("Table users successfully deleted");
-        } catch (SQLException e) {
-            System.out.println(e.getMessage());
-        }
-    }
-
-    public void saveUser(String name, String lastName, byte age) {
-        String query = "insert into users(name, last_name, age) values (?, ?, ?);";
-        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
-            preparedStatement.setString(1, name);
-            preparedStatement.setString(2, lastName);
-            preparedStatement.setByte(3, age);
-            preparedStatement.executeUpdate();
-            System.out.println("User with name " + name + " successfully saved");
-        } catch (SQLException e) {
-            System.out.println(e.getMessage());
-        }
-    }
-
-    public void removeUserById(long id) {
-        String query = "delete from users where id = ?;";
-        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
-            preparedStatement.setLong(1, id);
-            System.out.println("User with id " + id + " successfully deleted");
-        } catch (SQLException e) {
-            System.out.println(e.getMessage());
-        }
-    }
-
-    public List<User> getAllUsers() {
-        String query = "select * from users;";
-        List<User> users = new ArrayList<>();
-        try (Statement statement = connection.createStatement();
-             ResultSet resultSet = statement.executeQuery(query)) {
-            while (resultSet.next()) {
-                users.add(new User(
-                        resultSet.getString(2),
-                        resultSet.getString(3),
-                        resultSet.getByte(4))
-                );
-                users.forEach(x -> {
-                    try {
-                        System.out.println("ID: " + resultSet.getInt(1) + "\nName: " + x.getName() + "\nLast name: " + x.getLastName() + "\nAge: " + x.getAge() + "\n");
-                    } catch (SQLException e) {
-                        throw new RuntimeException(e);
-                    }
-                });
-            }
-        } catch (SQLException e) {
-            System.out.println(e.getMessage());
-        }
-        return users.stream().toList();
-    }
-
-    public void cleanUsersTable() {
-        String query = "truncate table users;";
-        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
-            preparedStatement.executeUpdate();
-            System.out.println("Table cleared");
-        } catch (SQLException e) {
-            System.out.println(e.getMessage());
-        }
-    }
-}
\ No newline at end of file
Index: jdbc/jdbcAndHibernate/src/main/java/peaksoft/Main.java
===================================================================
diff --git a/jdbc/jdbcAndHibernate/src/main/java/peaksoft/Main.java b/jdbc/jdbcAndHibernate/src/main/java/peaksoft/Main.java
deleted file mode 100644
--- a/jdbc/jdbcAndHibernate/src/main/java/peaksoft/Main.java	(revision c3ae57dae27ae3770733c33d7a5e58713a6a94c4)
+++ /dev/null	(revision c3ae57dae27ae3770733c33d7a5e58713a6a94c4)
@@ -1,49 +0,0 @@
-package peaksoft;
-
-import peaksoft.dao.UserDaoJdbcImpl;
-
-import java.util.Scanner;
-
-public class Main {
-    public static void main(String[] args) {
-        // реализуйте алгоритм здесь
-        Scanner in = new Scanner(System.in);
-        String button = "null";
-        UserDaoJdbcImpl userDaoJdbc = new UserDaoJdbcImpl();
-        try {
-            while (!button.equals("x")) {
-                commands();
-                button = in.nextLine();
-                switch (button) {
-                    case "1" -> userDaoJdbc.createUsersTable();
-                    case "2" -> {
-                        System.out.println("Return name, last name and age: ");
-                        userDaoJdbc.saveUser(in.nextLine(), in.nextLine(), in.nextByte());
-                    }
-                    case "3" -> userDaoJdbc.getAllUsers();
-                    case "4" -> {
-                        System.out.println("Return id user for remove");
-                        userDaoJdbc.removeUserById(in.nextByte());
-                    }
-                    case "5" -> userDaoJdbc.cleanUsersTable();
-                    case "6" -> userDaoJdbc.dropUsersTable();
-                    default -> System.out.println("Oops!");
-                }
-            }
-        } catch (Exception e) {
-            System.out.println(e.getMessage());
-        }
-    }
-
-    public static void commands() {
-        System.out.println("""
-                Press 1 create users table
-                Press 2 insert user
-                Press 3 get all users
-                Press 4 remove by id
-                Press 5 clean users table
-                Press 6 drop users table
-                Press x stop while
-                """);
-    }
-}
Index: jdbc/jdbcAndHibernate/src/main/java/peaksoft/util/Util.java
===================================================================
diff --git a/jdbc/jdbcAndHibernate/src/main/java/peaksoft/util/Util.java b/jdbc/jdbcAndHibernate/src/main/java/peaksoft/util/Util.java
deleted file mode 100644
--- a/jdbc/jdbcAndHibernate/src/main/java/peaksoft/util/Util.java	(revision c3ae57dae27ae3770733c33d7a5e58713a6a94c4)
+++ /dev/null	(revision c3ae57dae27ae3770733c33d7a5e58713a6a94c4)
@@ -1,23 +0,0 @@
-package peaksoft.util;
-
-import java.sql.Connection;
-import java.sql.DriverManager;
-import java.sql.SQLException;
-
-public class Util {
-    // реализуйте настройку соеденения с БД
-    private static final String userName = "postgres";
-    private static final String password = "1234";
-    private static final String url = "jdbc:postgresql://localhost:5432/sql_home_work_five";
-
-    public static Connection getConnection(){
-        Connection connection = null;
-        try{
-            connection = DriverManager.getConnection(url, userName, password);
-            System.out.println("Connection created successfully");
-        }catch (SQLException e) {
-            System.out.println(e.getMessage());
-        }
-        return connection;
-    }
-}
Index: jdbc/jdbcAndHibernate/src/main/java/peaksoft/dao/UserDaoHibernateImpl.java
===================================================================
diff --git a/jdbc/jdbcAndHibernate/src/main/java/peaksoft/dao/UserDaoHibernateImpl.java b/jdbc/jdbcAndHibernate/src/main/java/peaksoft/dao/UserDaoHibernateImpl.java
deleted file mode 100644
--- a/jdbc/jdbcAndHibernate/src/main/java/peaksoft/dao/UserDaoHibernateImpl.java	(revision c3ae57dae27ae3770733c33d7a5e58713a6a94c4)
+++ /dev/null	(revision c3ae57dae27ae3770733c33d7a5e58713a6a94c4)
@@ -1,42 +0,0 @@
-package peaksoft.dao;
-
-import peaksoft.model.User;
-
-import java.util.List;
-
-public class UserDaoHibernateImpl implements UserDao {
-
-    public UserDaoHibernateImpl() {
-
-    }
-
-    @Override
-    public void createUsersTable() {
-
-    }
-
-    @Override
-    public void dropUsersTable() {
-
-    }
-
-    @Override
-    public void saveUser(String name, String lastName, byte age) {
-
-    }
-
-    @Override
-    public void removeUserById(long id) {
-
-    }
-
-    @Override
-    public List<User> getAllUsers() {
-        return null;
-    }
-
-    @Override
-    public void cleanUsersTable() {
-
-    }
-}
Index: jdbc/jdbcAndHibernate/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n  <modelVersion>4.0.0</modelVersion>\r\n\r\n  <groupId>main.java.peaksoft</groupId>\r\n  <artifactId>jdbcAndHibernate</artifactId>\r\n  <version>1.0-SNAPSHOT</version>\r\n  <packaging>war</packaging>\r\n\r\n  <name>jdbcAndHibernate Maven Webapp</name>\r\n  <!-- FIXME change it to the project's website -->\r\n  <url>http://www.example.com</url>\r\n\r\n  <properties>\r\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n    <maven.compiler.source>1.7</maven.compiler.source>\r\n    <maven.compiler.target>1.7</maven.compiler.target>\r\n  </properties>\r\n\r\n  <dependencies>\r\n    <dependency>\r\n      <groupId>org.postgresql</groupId>\r\n      <artifactId>postgresql</artifactId>\r\n      <version>42.2.19</version>\r\n    </dependency>\r\n    <dependency>\r\n      <groupId>org.hibernate.javax.persistence</groupId>\r\n      <artifactId>hibernate-jpa-2.1-api</artifactId>\r\n      <version>1.0.2.Final</version>\r\n    </dependency>\r\n    <dependency>\r\n      <groupId>org.hibernate</groupId>\r\n      <artifactId>hibernate-core</artifactId>\r\n      <version>4.3.10.Final</version>\r\n    </dependency>\r\n    <dependency>\r\n      <groupId>junit</groupId>\r\n      <artifactId>junit</artifactId>\r\n      <version>4.11</version>\r\n      <scope>test</scope>\r\n    </dependency>\r\n  </dependencies>\r\n\r\n  <build>\r\n    <finalName>jdbcAndHibernate</finalName>\r\n    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->\r\n      <plugins>\r\n        <plugin>\r\n          <artifactId>maven-clean-plugin</artifactId>\r\n          <version>3.1.0</version>\r\n        </plugin>\r\n        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->\r\n        <plugin>\r\n          <artifactId>maven-resources-plugin</artifactId>\r\n          <version>3.0.2</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-compiler-plugin</artifactId>\r\n          <version>3.8.0</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-surefire-plugin</artifactId>\r\n          <version>2.22.1</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-war-plugin</artifactId>\r\n          <version>3.2.2</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-install-plugin</artifactId>\r\n          <version>2.5.2</version>\r\n        </plugin>\r\n        <plugin>\r\n          <artifactId>maven-deploy-plugin</artifactId>\r\n          <version>2.8.2</version>\r\n        </plugin>\r\n      </plugins>\r\n    </pluginManagement><plugins><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-compiler-plugin</artifactId><configuration><source>16</source><target>16</target></configuration></plugin></plugins>\r\n  </build>\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/jdbc/jdbcAndHibernate/pom.xml b/jdbc/jdbcAndHibernate/pom.xml
--- a/jdbc/jdbcAndHibernate/pom.xml	(revision c3ae57dae27ae3770733c33d7a5e58713a6a94c4)
+++ b/jdbc/jdbcAndHibernate/pom.xml	(date 1666330661568)
@@ -21,6 +21,11 @@
 
   <dependencies>
     <dependency>
+      <groupId>org.projectlombok</groupId>
+      <artifactId>lombok</artifactId>
+      <version>1.18.24</version>
+    </dependency>
+    <dependency>
       <groupId>org.postgresql</groupId>
       <artifactId>postgresql</artifactId>
       <version>42.2.19</version>
@@ -33,7 +38,7 @@
     <dependency>
       <groupId>org.hibernate</groupId>
       <artifactId>hibernate-core</artifactId>
-      <version>4.3.10.Final</version>
+      <version>5.6.10.Final</version>
     </dependency>
     <dependency>
       <groupId>junit</groupId>
@@ -77,6 +82,16 @@
           <version>2.8.2</version>
         </plugin>
       </plugins>
-    </pluginManagement><plugins><plugin><groupId>org.apache.maven.plugins</groupId><artifactId>maven-compiler-plugin</artifactId><configuration><source>16</source><target>16</target></configuration></plugin></plugins>
+    </pluginManagement>
+    <plugins>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-compiler-plugin</artifactId>
+        <configuration>
+          <source>16</source>
+          <target>16</target>
+        </configuration>
+      </plugin>
+    </plugins>
   </build>
 </project>
